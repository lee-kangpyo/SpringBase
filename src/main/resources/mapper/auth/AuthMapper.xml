<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.akmz.springBase.auth.mapper.AuthMapper">


    <!-- 재사용할 WHERE 조건 SQL 조각 정의 -->
    <sql id="whereCondition">
        <where>
            AND USER_NAME = #{userName}
        </where>
    </sql>
    <!-- 로그인 실패 횟수와 시각을 초기화하는 SQL 조각 정의 -->
    <sql id="reSetLoginLock">
        UPDATE <include refid="BASE.userTable" />
        SET LOGIN_FAILURE_COUNT = 0,
        LAST_FAILURE_TIMESTAMP = NULL
        <include refid="whereCondition" />
    </sql>

    <!-- AuthUser 엔티티의 모든 컬럼을 포함하는 SQL 조각 -->
    <sql id="authUserColumns">
        USER_NAME AS userName,
        PASSWORD AS password,
        EMAIL AS email, <!-- EMAIL 컬럼 추가 -->
        GOOGLE_ID AS googleId, <!-- GOOGLE_ID 컬럼 추가 -->
        NAVER_ID AS naverId, <!-- NAVER_ID 컬럼 추가 -->
        REFRESH_TOKEN AS refreshToken,
        USE_YN AS useYn,
        LOGIN_FAILURE_COUNT AS loginFailureCount,
        LAST_FAILURE_TIMESTAMP AS lastFailureTimestamp
    </sql>

    <select id="findByUsername" resultType="AuthUser">
            -- 유저 정보를 가져오기
            SELECT <include refid="authUserColumns"/>
            FROM <include refid="BASE.userTable"/>
            <include refid="whereCondition" />
    </select>

    
    <select id="getEmailAddr" resultType="java.lang.String">
        SELECT EMAIL
        FROM <include refid="BASE.emailTable" />
        WHERE USER_NAME = #{userId}
    </select>

    <update id="updateRefreshToken" parameterType="AuthUser">
        -- 리프레쉬 토큰을 DB에 저장
        UPDATE <include refid="BASE.userTable"/> SET REFRESH_TOKEN = #{refreshToken}
        <include refid="whereCondition" />
    </update>


    <update id="updateLoginFailure">
        -- 로그인 실패 시 호출: 실패 횟수 증가 및 마지막 실패 시각 업데이트
        UPDATE <include refid="BASE.userTable"/>
        SET LOGIN_FAILURE_COUNT = LOGIN_FAILURE_COUNT + 1,
        LAST_FAILURE_TIMESTAMP = SYSDATE
        <include refid="whereCondition" />
    </update>


    <update id="resetLoginFailureCount">
        -- 로그인 성공 시 호출: 실패 횟수 초기화
        <include refid="reSetLoginLock" />
    </update>

    <update id="resetLoginFailureOnUnlock">
        -- 잠금 해제 시 호출: 실패 횟수 초기화
        <include refid="reSetLoginLock" />
    </update>

    <update id="updateUserPassword" parameterType="AuthUser">
        -- 사용자 비밀번호 업데이트
        UPDATE <include refid="BASE.userTable"/>
        SET PASSWORD = #{password}
        <include refid="whereCondition" />
    </update>

    <!-- 회원가입 관련 쿼리 -->
    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM <include refid="BASE.userTable"/>
        WHERE EMAIL = #{email}
    </select>

    <select id="existsByUserName" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM <include refid="BASE.userTable"/>
        WHERE USER_NAME = #{userName}
    </select>

    <insert id="save" parameterType="AuthUser">
        INSERT INTO <include refid="BASE.userTable"/> (
            USER_NAME,
            PASSWORD,
            EMAIL,
            GOOGLE_ID, <!-- GOOGLE_ID 컬럼 추가 -->
            NAVER_ID, <!-- NAVER_ID 컬럼 추가 -->
            USE_YN,
            LOGIN_FAILURE_COUNT
        ) VALUES (
            #{userName},
            #{password},
            #{email},
            #{googleId}, <!-- googleId 값 추가 -->
            #{naverId}, <!-- naverId 값 추가 -->
            'Y', -- 기본값으로 'Y' 설정
            0    -- 기본값으로 0 설정
        )
    </insert>

    <select id="findByGoogleId" resultType="AuthUser">
        SELECT <include refid="authUserColumns"/>
        FROM <include refid="BASE.userTable"/>
        WHERE GOOGLE_ID = #{googleId}
    </select>

    <select id="findByNaverId" resultType="AuthUser">
        SELECT <include refid="authUserColumns"/>
        FROM <include refid="BASE.userTable"/>
        WHERE NAVER_ID = #{naverId}
    </select>

    <update id="updateUserUseYn">
        UPDATE <include refid="BASE.userTable"/>
        SET USE_YN = #{useYn}
        WHERE USER_NAME = #{userName}
    </update>

</mapper>